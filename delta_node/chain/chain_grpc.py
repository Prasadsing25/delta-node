# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: chain.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

from . import chain_pb2


class ChainBase(abc.ABC):

    @abc.abstractmethod
    async def Join(self, stream: 'grpclib.server.Stream[chain_pb2.JoinReq, chain_pb2.JoinResp]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateUrl(self, stream: 'grpclib.server.Stream[chain_pb2.UpdateUrlReq, chain_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateName(self, stream: 'grpclib.server.Stream[chain_pb2.UpdateNameReq, chain_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def Leave(self, stream: 'grpclib.server.Stream[chain_pb2.LeaveReq, chain_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def GetNodeInfo(self, stream: 'grpclib.server.Stream[chain_pb2.NodeInfoReq, chain_pb2.NodeInfoResp]') -> None:
        pass

    @abc.abstractmethod
    async def CreateTask(self, stream: 'grpclib.server.Stream[chain_pb2.CreateTaskReq, chain_pb2.CreateTaskResp]') -> None:
        pass

    @abc.abstractmethod
    async def StartRound(self, stream: 'grpclib.server.Stream[chain_pb2.StartRoundReq, chain_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def JoinRound(self, stream: 'grpclib.server.Stream[chain_pb2.JoinRoundReq, chain_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def GetTaskRound(self, stream: 'grpclib.server.Stream[chain_pb2.TaskRoundReq, chain_pb2.TaskRoundResp]') -> None:
        pass

    @abc.abstractmethod
    async def SelectCandidates(self, stream: 'grpclib.server.Stream[chain_pb2.CandidatesReq, chain_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def UploadSeedCommitment(self, stream: 'grpclib.server.Stream[chain_pb2.ShareCommitment, chain_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def UploadSecretKeyCommitment(self, stream: 'grpclib.server.Stream[chain_pb2.ShareCommitment, chain_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def GetClientPublickKeys(self, stream: 'grpclib.server.Stream[chain_pb2.PublicKeyReq, chain_pb2.PublicKeyResp]') -> None:
        pass

    @abc.abstractmethod
    async def StartCalculation(self, stream: 'grpclib.server.Stream[chain_pb2.CalculationReq, chain_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def UploadResultCommitment(self, stream: 'grpclib.server.Stream[chain_pb2.ResultCommitment, chain_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def GetResultCommitment(self, stream: 'grpclib.server.Stream[chain_pb2.ResultCommitmentReq, chain_pb2.ResultCommitmentResp]') -> None:
        pass

    @abc.abstractmethod
    async def StartAggregation(self, stream: 'grpclib.server.Stream[chain_pb2.AggregationReq, chain_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def UploadSeed(self, stream: 'grpclib.server.Stream[chain_pb2.Share, chain_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def UploadSecretKey(self, stream: 'grpclib.server.Stream[chain_pb2.Share, chain_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def GetSecretShareData(self, stream: 'grpclib.server.Stream[chain_pb2.SecretShareReq, chain_pb2.SecretShareResp]') -> None:
        pass

    @abc.abstractmethod
    async def EndRound(self, stream: 'grpclib.server.Stream[chain_pb2.EndRoundReq, chain_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def Subscribe(self, stream: 'grpclib.server.Stream[chain_pb2.EventReq, chain_pb2.Event]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/chain.Chain/Join': grpclib.const.Handler(
                self.Join,
                grpclib.const.Cardinality.UNARY_UNARY,
                chain_pb2.JoinReq,
                chain_pb2.JoinResp,
            ),
            '/chain.Chain/UpdateUrl': grpclib.const.Handler(
                self.UpdateUrl,
                grpclib.const.Cardinality.UNARY_UNARY,
                chain_pb2.UpdateUrlReq,
                chain_pb2.Empty,
            ),
            '/chain.Chain/UpdateName': grpclib.const.Handler(
                self.UpdateName,
                grpclib.const.Cardinality.UNARY_UNARY,
                chain_pb2.UpdateNameReq,
                chain_pb2.Empty,
            ),
            '/chain.Chain/Leave': grpclib.const.Handler(
                self.Leave,
                grpclib.const.Cardinality.UNARY_UNARY,
                chain_pb2.LeaveReq,
                chain_pb2.Empty,
            ),
            '/chain.Chain/GetNodeInfo': grpclib.const.Handler(
                self.GetNodeInfo,
                grpclib.const.Cardinality.UNARY_UNARY,
                chain_pb2.NodeInfoReq,
                chain_pb2.NodeInfoResp,
            ),
            '/chain.Chain/CreateTask': grpclib.const.Handler(
                self.CreateTask,
                grpclib.const.Cardinality.UNARY_UNARY,
                chain_pb2.CreateTaskReq,
                chain_pb2.CreateTaskResp,
            ),
            '/chain.Chain/StartRound': grpclib.const.Handler(
                self.StartRound,
                grpclib.const.Cardinality.UNARY_UNARY,
                chain_pb2.StartRoundReq,
                chain_pb2.Empty,
            ),
            '/chain.Chain/JoinRound': grpclib.const.Handler(
                self.JoinRound,
                grpclib.const.Cardinality.UNARY_UNARY,
                chain_pb2.JoinRoundReq,
                chain_pb2.Empty,
            ),
            '/chain.Chain/GetTaskRound': grpclib.const.Handler(
                self.GetTaskRound,
                grpclib.const.Cardinality.UNARY_UNARY,
                chain_pb2.TaskRoundReq,
                chain_pb2.TaskRoundResp,
            ),
            '/chain.Chain/SelectCandidates': grpclib.const.Handler(
                self.SelectCandidates,
                grpclib.const.Cardinality.UNARY_UNARY,
                chain_pb2.CandidatesReq,
                chain_pb2.Empty,
            ),
            '/chain.Chain/UploadSeedCommitment': grpclib.const.Handler(
                self.UploadSeedCommitment,
                grpclib.const.Cardinality.UNARY_UNARY,
                chain_pb2.ShareCommitment,
                chain_pb2.Empty,
            ),
            '/chain.Chain/UploadSecretKeyCommitment': grpclib.const.Handler(
                self.UploadSecretKeyCommitment,
                grpclib.const.Cardinality.UNARY_UNARY,
                chain_pb2.ShareCommitment,
                chain_pb2.Empty,
            ),
            '/chain.Chain/GetClientPublickKeys': grpclib.const.Handler(
                self.GetClientPublickKeys,
                grpclib.const.Cardinality.UNARY_UNARY,
                chain_pb2.PublicKeyReq,
                chain_pb2.PublicKeyResp,
            ),
            '/chain.Chain/StartCalculation': grpclib.const.Handler(
                self.StartCalculation,
                grpclib.const.Cardinality.UNARY_UNARY,
                chain_pb2.CalculationReq,
                chain_pb2.Empty,
            ),
            '/chain.Chain/UploadResultCommitment': grpclib.const.Handler(
                self.UploadResultCommitment,
                grpclib.const.Cardinality.UNARY_UNARY,
                chain_pb2.ResultCommitment,
                chain_pb2.Empty,
            ),
            '/chain.Chain/GetResultCommitment': grpclib.const.Handler(
                self.GetResultCommitment,
                grpclib.const.Cardinality.UNARY_UNARY,
                chain_pb2.ResultCommitmentReq,
                chain_pb2.ResultCommitmentResp,
            ),
            '/chain.Chain/StartAggregation': grpclib.const.Handler(
                self.StartAggregation,
                grpclib.const.Cardinality.UNARY_UNARY,
                chain_pb2.AggregationReq,
                chain_pb2.Empty,
            ),
            '/chain.Chain/UploadSeed': grpclib.const.Handler(
                self.UploadSeed,
                grpclib.const.Cardinality.UNARY_UNARY,
                chain_pb2.Share,
                chain_pb2.Empty,
            ),
            '/chain.Chain/UploadSecretKey': grpclib.const.Handler(
                self.UploadSecretKey,
                grpclib.const.Cardinality.UNARY_UNARY,
                chain_pb2.Share,
                chain_pb2.Empty,
            ),
            '/chain.Chain/GetSecretShareData': grpclib.const.Handler(
                self.GetSecretShareData,
                grpclib.const.Cardinality.UNARY_UNARY,
                chain_pb2.SecretShareReq,
                chain_pb2.SecretShareResp,
            ),
            '/chain.Chain/EndRound': grpclib.const.Handler(
                self.EndRound,
                grpclib.const.Cardinality.UNARY_UNARY,
                chain_pb2.EndRoundReq,
                chain_pb2.Empty,
            ),
            '/chain.Chain/Subscribe': grpclib.const.Handler(
                self.Subscribe,
                grpclib.const.Cardinality.UNARY_STREAM,
                chain_pb2.EventReq,
                chain_pb2.Event,
            ),
        }


class ChainStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Join = grpclib.client.UnaryUnaryMethod(
            channel,
            '/chain.Chain/Join',
            chain_pb2.JoinReq,
            chain_pb2.JoinResp,
        )
        self.UpdateUrl = grpclib.client.UnaryUnaryMethod(
            channel,
            '/chain.Chain/UpdateUrl',
            chain_pb2.UpdateUrlReq,
            chain_pb2.Empty,
        )
        self.UpdateName = grpclib.client.UnaryUnaryMethod(
            channel,
            '/chain.Chain/UpdateName',
            chain_pb2.UpdateNameReq,
            chain_pb2.Empty,
        )
        self.Leave = grpclib.client.UnaryUnaryMethod(
            channel,
            '/chain.Chain/Leave',
            chain_pb2.LeaveReq,
            chain_pb2.Empty,
        )
        self.GetNodeInfo = grpclib.client.UnaryUnaryMethod(
            channel,
            '/chain.Chain/GetNodeInfo',
            chain_pb2.NodeInfoReq,
            chain_pb2.NodeInfoResp,
        )
        self.CreateTask = grpclib.client.UnaryUnaryMethod(
            channel,
            '/chain.Chain/CreateTask',
            chain_pb2.CreateTaskReq,
            chain_pb2.CreateTaskResp,
        )
        self.StartRound = grpclib.client.UnaryUnaryMethod(
            channel,
            '/chain.Chain/StartRound',
            chain_pb2.StartRoundReq,
            chain_pb2.Empty,
        )
        self.JoinRound = grpclib.client.UnaryUnaryMethod(
            channel,
            '/chain.Chain/JoinRound',
            chain_pb2.JoinRoundReq,
            chain_pb2.Empty,
        )
        self.GetTaskRound = grpclib.client.UnaryUnaryMethod(
            channel,
            '/chain.Chain/GetTaskRound',
            chain_pb2.TaskRoundReq,
            chain_pb2.TaskRoundResp,
        )
        self.SelectCandidates = grpclib.client.UnaryUnaryMethod(
            channel,
            '/chain.Chain/SelectCandidates',
            chain_pb2.CandidatesReq,
            chain_pb2.Empty,
        )
        self.UploadSeedCommitment = grpclib.client.UnaryUnaryMethod(
            channel,
            '/chain.Chain/UploadSeedCommitment',
            chain_pb2.ShareCommitment,
            chain_pb2.Empty,
        )
        self.UploadSecretKeyCommitment = grpclib.client.UnaryUnaryMethod(
            channel,
            '/chain.Chain/UploadSecretKeyCommitment',
            chain_pb2.ShareCommitment,
            chain_pb2.Empty,
        )
        self.GetClientPublickKeys = grpclib.client.UnaryUnaryMethod(
            channel,
            '/chain.Chain/GetClientPublickKeys',
            chain_pb2.PublicKeyReq,
            chain_pb2.PublicKeyResp,
        )
        self.StartCalculation = grpclib.client.UnaryUnaryMethod(
            channel,
            '/chain.Chain/StartCalculation',
            chain_pb2.CalculationReq,
            chain_pb2.Empty,
        )
        self.UploadResultCommitment = grpclib.client.UnaryUnaryMethod(
            channel,
            '/chain.Chain/UploadResultCommitment',
            chain_pb2.ResultCommitment,
            chain_pb2.Empty,
        )
        self.GetResultCommitment = grpclib.client.UnaryUnaryMethod(
            channel,
            '/chain.Chain/GetResultCommitment',
            chain_pb2.ResultCommitmentReq,
            chain_pb2.ResultCommitmentResp,
        )
        self.StartAggregation = grpclib.client.UnaryUnaryMethod(
            channel,
            '/chain.Chain/StartAggregation',
            chain_pb2.AggregationReq,
            chain_pb2.Empty,
        )
        self.UploadSeed = grpclib.client.UnaryUnaryMethod(
            channel,
            '/chain.Chain/UploadSeed',
            chain_pb2.Share,
            chain_pb2.Empty,
        )
        self.UploadSecretKey = grpclib.client.UnaryUnaryMethod(
            channel,
            '/chain.Chain/UploadSecretKey',
            chain_pb2.Share,
            chain_pb2.Empty,
        )
        self.GetSecretShareData = grpclib.client.UnaryUnaryMethod(
            channel,
            '/chain.Chain/GetSecretShareData',
            chain_pb2.SecretShareReq,
            chain_pb2.SecretShareResp,
        )
        self.EndRound = grpclib.client.UnaryUnaryMethod(
            channel,
            '/chain.Chain/EndRound',
            chain_pb2.EndRoundReq,
            chain_pb2.Empty,
        )
        self.Subscribe = grpclib.client.UnaryStreamMethod(
            channel,
            '/chain.Chain/Subscribe',
            chain_pb2.EventReq,
            chain_pb2.Event,
        )
