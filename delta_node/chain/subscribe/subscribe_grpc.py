# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: subscribe.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

from . import subscribe_pb2


class SubscribeBase(abc.ABC):

    @abc.abstractmethod
    async def Subscribe(self, stream: 'grpclib.server.Stream[subscribe_pb2.EventReq, subscribe_pb2.Event]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/subscribe.Subscribe/Subscribe': grpclib.const.Handler(
                self.Subscribe,
                grpclib.const.Cardinality.UNARY_STREAM,
                subscribe_pb2.EventReq,
                subscribe_pb2.Event,
            ),
        }


class SubscribeStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Subscribe = grpclib.client.UnaryStreamMethod(
            channel,
            '/subscribe.Subscribe/Subscribe',
            subscribe_pb2.EventReq,
            subscribe_pb2.Event,
        )
