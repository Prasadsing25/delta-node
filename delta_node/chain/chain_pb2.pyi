"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import builtins
import concurrent.futures
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.service
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class RoundStatus(_RoundStatus, metaclass=_RoundStatusEnumTypeWrapper):
    pass
class _RoundStatus:
    V = typing.NewType('V', builtins.int)
class _RoundStatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_RoundStatus.V], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
    STARTED = RoundStatus.V(0)
    RUNNING = RoundStatus.V(1)
    CALCULATING = RoundStatus.V(2)
    AGGREGATING = RoundStatus.V(3)
    FINISHED = RoundStatus.V(4)

STARTED = RoundStatus.V(0)
RUNNING = RoundStatus.V(1)
CALCULATING = RoundStatus.V(2)
AGGREGATING = RoundStatus.V(3)
FINISHED = RoundStatus.V(4)
global___RoundStatus = RoundStatus


class Empty(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    def __init__(self,
        ) -> None: ...
global___Empty = Empty

class JoinReq(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    URL_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    url: typing.Text = ...
    name: typing.Text = ...
    def __init__(self,
        *,
        url : typing.Text = ...,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","url",b"url"]) -> None: ...
global___JoinReq = JoinReq

class JoinResp(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADDRESS_FIELD_NUMBER: builtins.int
    address: typing.Text = ...
    def __init__(self,
        *,
        address : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["address",b"address"]) -> None: ...
global___JoinResp = JoinResp

class UpdateUrlReq(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADDRESS_FIELD_NUMBER: builtins.int
    URL_FIELD_NUMBER: builtins.int
    address: typing.Text = ...
    url: typing.Text = ...
    def __init__(self,
        *,
        address : typing.Text = ...,
        url : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["address",b"address","url",b"url"]) -> None: ...
global___UpdateUrlReq = UpdateUrlReq

class UpdateNameReq(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADDRESS_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    address: typing.Text = ...
    name: typing.Text = ...
    def __init__(self,
        *,
        address : typing.Text = ...,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["address",b"address","name",b"name"]) -> None: ...
global___UpdateNameReq = UpdateNameReq

class LeaveReq(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADDRESS_FIELD_NUMBER: builtins.int
    address: typing.Text = ...
    def __init__(self,
        *,
        address : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["address",b"address"]) -> None: ...
global___LeaveReq = LeaveReq

class NodeInfoReq(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADDRESS_FIELD_NUMBER: builtins.int
    address: typing.Text = ...
    def __init__(self,
        *,
        address : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["address",b"address"]) -> None: ...
global___NodeInfoReq = NodeInfoReq

class NodeInfoResp(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    URL_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    url: typing.Text = ...
    name: typing.Text = ...
    def __init__(self,
        *,
        url : typing.Text = ...,
        name : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","url",b"url"]) -> None: ...
global___NodeInfoResp = NodeInfoResp

class CreateTaskReq(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADDRESS_FIELD_NUMBER: builtins.int
    DATASET_FIELD_NUMBER: builtins.int
    COMMITMENT_FIELD_NUMBER: builtins.int
    address: typing.Text = ...
    dataset: typing.Text = ...
    commitment: typing.Text = ...
    def __init__(self,
        *,
        address : typing.Text = ...,
        dataset : typing.Text = ...,
        commitment : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["address",b"address","commitment",b"commitment","dataset",b"dataset"]) -> None: ...
global___CreateTaskReq = CreateTaskReq

class CreateTaskResp(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TASK_ID_FIELD_NUMBER: builtins.int
    task_id: typing.Text = ...
    def __init__(self,
        *,
        task_id : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["task_id",b"task_id"]) -> None: ...
global___CreateTaskResp = CreateTaskResp

class StartRoundReq(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADDRESS_FIELD_NUMBER: builtins.int
    TASK_ID_FIELD_NUMBER: builtins.int
    ROUND_FIELD_NUMBER: builtins.int
    address: typing.Text = ...
    task_id: typing.Text = ...
    round: builtins.int = ...
    def __init__(self,
        *,
        address : typing.Text = ...,
        task_id : typing.Text = ...,
        round : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["address",b"address","round",b"round","task_id",b"task_id"]) -> None: ...
global___StartRoundReq = StartRoundReq

class JoinRoundReq(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADDRESS_FIELD_NUMBER: builtins.int
    TASK_ID_FIELD_NUMBER: builtins.int
    ROUND_FIELD_NUMBER: builtins.int
    PK1_FIELD_NUMBER: builtins.int
    PK2_FIELD_NUMBER: builtins.int
    address: typing.Text = ...
    task_id: typing.Text = ...
    round: builtins.int = ...
    pk1: typing.Text = ...
    pk2: typing.Text = ...
    def __init__(self,
        *,
        address : typing.Text = ...,
        task_id : typing.Text = ...,
        round : builtins.int = ...,
        pk1 : typing.Text = ...,
        pk2 : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["address",b"address","pk1",b"pk1","pk2",b"pk2","round",b"round","task_id",b"task_id"]) -> None: ...
global___JoinRoundReq = JoinRoundReq

class TaskRoundReq(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TASK_ID_FIELD_NUMBER: builtins.int
    ROUND_FIELD_NUMBER: builtins.int
    task_id: typing.Text = ...
    round: builtins.int = ...
    def __init__(self,
        *,
        task_id : typing.Text = ...,
        round : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["round",b"round","task_id",b"task_id"]) -> None: ...
global___TaskRoundReq = TaskRoundReq

class TaskRoundResp(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ROUND_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    CLIENTS_FIELD_NUMBER: builtins.int
    round: builtins.int = ...
    status: global___RoundStatus.V = ...
    @property
    def clients(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]: ...
    def __init__(self,
        *,
        round : builtins.int = ...,
        status : global___RoundStatus.V = ...,
        clients : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["clients",b"clients","round",b"round","status",b"status"]) -> None: ...
global___TaskRoundResp = TaskRoundResp

class CandidatesReq(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADDRESS_FIELD_NUMBER: builtins.int
    TASK_ID_FIELD_NUMBER: builtins.int
    ROUND_FIELD_NUMBER: builtins.int
    CLIENTS_FIELD_NUMBER: builtins.int
    address: typing.Text = ...
    task_id: typing.Text = ...
    round: builtins.int = ...
    @property
    def clients(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]: ...
    def __init__(self,
        *,
        address : typing.Text = ...,
        task_id : typing.Text = ...,
        round : builtins.int = ...,
        clients : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["address",b"address","clients",b"clients","round",b"round","task_id",b"task_id"]) -> None: ...
global___CandidatesReq = CandidatesReq

class ShareCommitment(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADDRESS_FIELD_NUMBER: builtins.int
    TASK_ID_FIELD_NUMBER: builtins.int
    ROUND_FIELD_NUMBER: builtins.int
    RECEIVER_FIELD_NUMBER: builtins.int
    COMMITMENT_FIELD_NUMBER: builtins.int
    address: typing.Text = ...
    task_id: typing.Text = ...
    round: builtins.int = ...
    receiver: typing.Text = ...
    commitment: typing.Text = ...
    def __init__(self,
        *,
        address : typing.Text = ...,
        task_id : typing.Text = ...,
        round : builtins.int = ...,
        receiver : typing.Text = ...,
        commitment : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["address",b"address","commitment",b"commitment","receiver",b"receiver","round",b"round","task_id",b"task_id"]) -> None: ...
global___ShareCommitment = ShareCommitment

class PublicKeyReq(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TASK_ID_FIELD_NUMBER: builtins.int
    ROUND_FIELD_NUMBER: builtins.int
    CLIENT_FIELD_NUMBER: builtins.int
    task_id: typing.Text = ...
    round: builtins.int = ...
    client: typing.Text = ...
    def __init__(self,
        *,
        task_id : typing.Text = ...,
        round : builtins.int = ...,
        client : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["client",b"client","round",b"round","task_id",b"task_id"]) -> None: ...
global___PublicKeyReq = PublicKeyReq

class PublicKeyResp(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PK1_FIELD_NUMBER: builtins.int
    PK2_FIELD_NUMBER: builtins.int
    pk1: typing.Text = ...
    pk2: typing.Text = ...
    def __init__(self,
        *,
        pk1 : typing.Text = ...,
        pk2 : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["pk1",b"pk1","pk2",b"pk2"]) -> None: ...
global___PublicKeyResp = PublicKeyResp

class CalculationReq(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADDRESS_FIELD_NUMBER: builtins.int
    TASK_ID_FIELD_NUMBER: builtins.int
    ROUND_FIELD_NUMBER: builtins.int
    CLIENTS_FIELD_NUMBER: builtins.int
    address: typing.Text = ...
    task_id: typing.Text = ...
    round: builtins.int = ...
    @property
    def clients(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]: ...
    def __init__(self,
        *,
        address : typing.Text = ...,
        task_id : typing.Text = ...,
        round : builtins.int = ...,
        clients : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["address",b"address","clients",b"clients","round",b"round","task_id",b"task_id"]) -> None: ...
global___CalculationReq = CalculationReq

class ResultCommitment(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADDRESS_FIELD_NUMBER: builtins.int
    TASK_ID_FIELD_NUMBER: builtins.int
    ROUND_FIELD_NUMBER: builtins.int
    COMMITMENT_FIELD_NUMBER: builtins.int
    address: typing.Text = ...
    task_id: typing.Text = ...
    round: builtins.int = ...
    commitment: typing.Text = ...
    def __init__(self,
        *,
        address : typing.Text = ...,
        task_id : typing.Text = ...,
        round : builtins.int = ...,
        commitment : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["address",b"address","commitment",b"commitment","round",b"round","task_id",b"task_id"]) -> None: ...
global___ResultCommitment = ResultCommitment

class ResultCommitmentReq(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TASK_ID_FIELD_NUMBER: builtins.int
    ROUND_FIELD_NUMBER: builtins.int
    CLIENT_FIELD_NUMBER: builtins.int
    task_id: typing.Text = ...
    round: builtins.int = ...
    client: typing.Text = ...
    def __init__(self,
        *,
        task_id : typing.Text = ...,
        round : builtins.int = ...,
        client : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["client",b"client","round",b"round","task_id",b"task_id"]) -> None: ...
global___ResultCommitmentReq = ResultCommitmentReq

class ResultCommitmentResp(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    COMMITMENT_FIELD_NUMBER: builtins.int
    commitment: typing.Text = ...
    def __init__(self,
        *,
        commitment : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["commitment",b"commitment"]) -> None: ...
global___ResultCommitmentResp = ResultCommitmentResp

class AggregationReq(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADDRESS_FIELD_NUMBER: builtins.int
    TASK_ID_FIELD_NUMBER: builtins.int
    ROUND_FIELD_NUMBER: builtins.int
    CLIENTS_FIELD_NUMBER: builtins.int
    address: typing.Text = ...
    task_id: typing.Text = ...
    round: builtins.int = ...
    @property
    def clients(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]: ...
    def __init__(self,
        *,
        address : typing.Text = ...,
        task_id : typing.Text = ...,
        round : builtins.int = ...,
        clients : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["address",b"address","clients",b"clients","round",b"round","task_id",b"task_id"]) -> None: ...
global___AggregationReq = AggregationReq

class Share(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADDRESS_FIELD_NUMBER: builtins.int
    TASK_ID_FIELD_NUMBER: builtins.int
    ROUND_FIELD_NUMBER: builtins.int
    SENDER_FIELD_NUMBER: builtins.int
    SHARE_FIELD_NUMBER: builtins.int
    address: typing.Text = ...
    task_id: typing.Text = ...
    round: builtins.int = ...
    sender: typing.Text = ...
    share: typing.Text = ...
    def __init__(self,
        *,
        address : typing.Text = ...,
        task_id : typing.Text = ...,
        round : builtins.int = ...,
        sender : typing.Text = ...,
        share : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["address",b"address","round",b"round","sender",b"sender","share",b"share","task_id",b"task_id"]) -> None: ...
global___Share = Share

class SecretShareReq(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TASK_ID_FIELD_NUMBER: builtins.int
    ROUND_FIELD_NUMBER: builtins.int
    SENDER_FIELD_NUMBER: builtins.int
    RECEIVER_FIELD_NUMBER: builtins.int
    task_id: typing.Text = ...
    round: builtins.int = ...
    sender: typing.Text = ...
    receiver: typing.Text = ...
    def __init__(self,
        *,
        task_id : typing.Text = ...,
        round : builtins.int = ...,
        sender : typing.Text = ...,
        receiver : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["receiver",b"receiver","round",b"round","sender",b"sender","task_id",b"task_id"]) -> None: ...
global___SecretShareReq = SecretShareReq

class SecretShareResp(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SEED_FIELD_NUMBER: builtins.int
    SEED_COMMITMENT_FIELD_NUMBER: builtins.int
    SECRET_KEY_FIELD_NUMBER: builtins.int
    SECRET_KEY_COMMITMENT_FIELD_NUMBER: builtins.int
    seed: typing.Text = ...
    seed_commitment: typing.Text = ...
    secret_key: typing.Text = ...
    secret_key_commitment: typing.Text = ...
    def __init__(self,
        *,
        seed : typing.Text = ...,
        seed_commitment : typing.Text = ...,
        secret_key : typing.Text = ...,
        secret_key_commitment : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_secret_key",b"_secret_key","_secret_key_commitment",b"_secret_key_commitment","_seed",b"_seed","_seed_commitment",b"_seed_commitment","secret_key",b"secret_key","secret_key_commitment",b"secret_key_commitment","seed",b"seed","seed_commitment",b"seed_commitment"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_secret_key",b"_secret_key","_secret_key_commitment",b"_secret_key_commitment","_seed",b"_seed","_seed_commitment",b"_seed_commitment","secret_key",b"secret_key","secret_key_commitment",b"secret_key_commitment","seed",b"seed","seed_commitment",b"seed_commitment"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_secret_key",b"_secret_key"]) -> typing.Optional[typing_extensions.Literal["secret_key"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_secret_key_commitment",b"_secret_key_commitment"]) -> typing.Optional[typing_extensions.Literal["secret_key_commitment"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_seed",b"_seed"]) -> typing.Optional[typing_extensions.Literal["seed"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_seed_commitment",b"_seed_commitment"]) -> typing.Optional[typing_extensions.Literal["seed_commitment"]]: ...
global___SecretShareResp = SecretShareResp

class EndRoundReq(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADDRESS_FIELD_NUMBER: builtins.int
    TASK_ID_FIELD_NUMBER: builtins.int
    ROUND_FIELD_NUMBER: builtins.int
    address: typing.Text = ...
    task_id: typing.Text = ...
    round: builtins.int = ...
    def __init__(self,
        *,
        address : typing.Text = ...,
        task_id : typing.Text = ...,
        round : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["address",b"address","round",b"round","task_id",b"task_id"]) -> None: ...
global___EndRoundReq = EndRoundReq

class EventReq(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADDRESS_FIELD_NUMBER: builtins.int
    address: typing.Text = ...
    def __init__(self,
        *,
        address : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["address",b"address"]) -> None: ...
global___EventReq = EventReq

class Event(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TASK_CREATE_FIELD_NUMBER: builtins.int
    ROUND_STARTED_FIELD_NUMBER: builtins.int
    PARTNER_SELECTED_FIELD_NUMBER: builtins.int
    CALCULATION_STARTED_FIELD_NUMBER: builtins.int
    AGGREGATION_STARTED_FIELD_NUMBER: builtins.int
    ROUND_ENDED_FIELD_NUMBER: builtins.int
    @property
    def task_create(self) -> global___TaskCreateEvent: ...
    @property
    def round_started(self) -> global___RoundStartedEvent: ...
    @property
    def partner_selected(self) -> global___PartnerSelectedEvent: ...
    @property
    def calculation_started(self) -> global___CalculationStartedEvent: ...
    @property
    def aggregation_started(self) -> global___AggregationStartedEvent: ...
    @property
    def round_ended(self) -> global___RoundEndedEvent: ...
    def __init__(self,
        *,
        task_create : typing.Optional[global___TaskCreateEvent] = ...,
        round_started : typing.Optional[global___RoundStartedEvent] = ...,
        partner_selected : typing.Optional[global___PartnerSelectedEvent] = ...,
        calculation_started : typing.Optional[global___CalculationStartedEvent] = ...,
        aggregation_started : typing.Optional[global___AggregationStartedEvent] = ...,
        round_ended : typing.Optional[global___RoundEndedEvent] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["aggregation_started",b"aggregation_started","calculation_started",b"calculation_started","event",b"event","partner_selected",b"partner_selected","round_ended",b"round_ended","round_started",b"round_started","task_create",b"task_create"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["aggregation_started",b"aggregation_started","calculation_started",b"calculation_started","event",b"event","partner_selected",b"partner_selected","round_ended",b"round_ended","round_started",b"round_started","task_create",b"task_create"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["event",b"event"]) -> typing.Optional[typing_extensions.Literal["task_create","round_started","partner_selected","calculation_started","aggregation_started","round_ended"]]: ...
global___Event = Event

class TaskCreateEvent(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ADDRESS_FIELD_NUMBER: builtins.int
    TASK_ID_FIELD_NUMBER: builtins.int
    DATASET_FIELD_NUMBER: builtins.int
    URL_FIELD_NUMBER: builtins.int
    COMMITMENT_FIELD_NUMBER: builtins.int
    address: typing.Text = ...
    task_id: typing.Text = ...
    dataset: typing.Text = ...
    url: typing.Text = ...
    commitment: typing.Text = ...
    def __init__(self,
        *,
        address : typing.Text = ...,
        task_id : typing.Text = ...,
        dataset : typing.Text = ...,
        url : typing.Text = ...,
        commitment : typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["address",b"address","commitment",b"commitment","dataset",b"dataset","task_id",b"task_id","url",b"url"]) -> None: ...
global___TaskCreateEvent = TaskCreateEvent

class RoundStartedEvent(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TASK_ID_FIELD_NUMBER: builtins.int
    ROUND_FIELD_NUMBER: builtins.int
    task_id: typing.Text = ...
    round: builtins.int = ...
    def __init__(self,
        *,
        task_id : typing.Text = ...,
        round : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["round",b"round","task_id",b"task_id"]) -> None: ...
global___RoundStartedEvent = RoundStartedEvent

class PartnerSelectedEvent(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TASK_ID_FIELD_NUMBER: builtins.int
    ROUND_FIELD_NUMBER: builtins.int
    ADDRS_FIELD_NUMBER: builtins.int
    task_id: typing.Text = ...
    round: builtins.int = ...
    @property
    def addrs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]: ...
    def __init__(self,
        *,
        task_id : typing.Text = ...,
        round : builtins.int = ...,
        addrs : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["addrs",b"addrs","round",b"round","task_id",b"task_id"]) -> None: ...
global___PartnerSelectedEvent = PartnerSelectedEvent

class CalculationStartedEvent(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TASK_ID_FIELD_NUMBER: builtins.int
    ROUND_FIELD_NUMBER: builtins.int
    ADDRS_FIELD_NUMBER: builtins.int
    task_id: typing.Text = ...
    round: builtins.int = ...
    @property
    def addrs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]: ...
    def __init__(self,
        *,
        task_id : typing.Text = ...,
        round : builtins.int = ...,
        addrs : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["addrs",b"addrs","round",b"round","task_id",b"task_id"]) -> None: ...
global___CalculationStartedEvent = CalculationStartedEvent

class AggregationStartedEvent(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TASK_ID_FIELD_NUMBER: builtins.int
    ROUND_FIELD_NUMBER: builtins.int
    ADDRS_FIELD_NUMBER: builtins.int
    task_id: typing.Text = ...
    round: builtins.int = ...
    @property
    def addrs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]: ...
    def __init__(self,
        *,
        task_id : typing.Text = ...,
        round : builtins.int = ...,
        addrs : typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["addrs",b"addrs","round",b"round","task_id",b"task_id"]) -> None: ...
global___AggregationStartedEvent = AggregationStartedEvent

class RoundEndedEvent(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TASK_ID_FIELD_NUMBER: builtins.int
    ROUND_FIELD_NUMBER: builtins.int
    task_id: typing.Text = ...
    round: builtins.int = ...
    def __init__(self,
        *,
        task_id : typing.Text = ...,
        round : builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["round",b"round","task_id",b"task_id"]) -> None: ...
global___RoundEndedEvent = RoundEndedEvent

class Chain(google.protobuf.service.Service, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Join(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___JoinReq,
        done: typing.Optional[typing.Callable[[global___JoinResp], None]],
    ) -> concurrent.futures.Future[global___JoinResp]: ...
    @abc.abstractmethod
    def UpdateUrl(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___UpdateUrlReq,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    @abc.abstractmethod
    def UpdateName(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___UpdateNameReq,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    @abc.abstractmethod
    def Leave(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___LeaveReq,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    @abc.abstractmethod
    def GetNodeInfo(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___NodeInfoReq,
        done: typing.Optional[typing.Callable[[global___NodeInfoResp], None]],
    ) -> concurrent.futures.Future[global___NodeInfoResp]: ...
    @abc.abstractmethod
    def CreateTask(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___CreateTaskReq,
        done: typing.Optional[typing.Callable[[global___CreateTaskResp], None]],
    ) -> concurrent.futures.Future[global___CreateTaskResp]: ...
    @abc.abstractmethod
    def StartRound(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___StartRoundReq,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    @abc.abstractmethod
    def JoinRound(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___JoinRoundReq,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    @abc.abstractmethod
    def GetTaskRound(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___TaskRoundReq,
        done: typing.Optional[typing.Callable[[global___TaskRoundResp], None]],
    ) -> concurrent.futures.Future[global___TaskRoundResp]: ...
    @abc.abstractmethod
    def SelectCandidates(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___CandidatesReq,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    @abc.abstractmethod
    def UploadSeedCommitment(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___ShareCommitment,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    @abc.abstractmethod
    def UploadSecretKeyCommitment(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___ShareCommitment,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    @abc.abstractmethod
    def GetClientPublickKeys(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___PublicKeyReq,
        done: typing.Optional[typing.Callable[[global___PublicKeyResp], None]],
    ) -> concurrent.futures.Future[global___PublicKeyResp]: ...
    @abc.abstractmethod
    def StartCalculation(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___CalculationReq,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    @abc.abstractmethod
    def UploadResultCommitment(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___ResultCommitment,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    @abc.abstractmethod
    def GetResultCommitment(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___ResultCommitmentReq,
        done: typing.Optional[typing.Callable[[global___ResultCommitmentResp], None]],
    ) -> concurrent.futures.Future[global___ResultCommitmentResp]: ...
    @abc.abstractmethod
    def StartAggregation(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___AggregationReq,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    @abc.abstractmethod
    def UploadSeed(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___Share,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    @abc.abstractmethod
    def UploadSecretKey(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___Share,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    @abc.abstractmethod
    def GetSecretShareData(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___SecretShareReq,
        done: typing.Optional[typing.Callable[[global___SecretShareResp], None]],
    ) -> concurrent.futures.Future[global___SecretShareResp]: ...
    @abc.abstractmethod
    def EndRound(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___EndRoundReq,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    @abc.abstractmethod
    def Subscribe(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___EventReq,
        done: typing.Optional[typing.Callable[[global___Event], None]],
    ) -> concurrent.futures.Future[global___Event]: ...
class Chain_Stub(Chain):
    def __init__(self, rpc_channel: google.protobuf.service.RpcChannel) -> None: ...
    def Join(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___JoinReq,
        done: typing.Optional[typing.Callable[[global___JoinResp], None]],
    ) -> concurrent.futures.Future[global___JoinResp]: ...
    def UpdateUrl(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___UpdateUrlReq,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    def UpdateName(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___UpdateNameReq,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    def Leave(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___LeaveReq,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    def GetNodeInfo(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___NodeInfoReq,
        done: typing.Optional[typing.Callable[[global___NodeInfoResp], None]],
    ) -> concurrent.futures.Future[global___NodeInfoResp]: ...
    def CreateTask(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___CreateTaskReq,
        done: typing.Optional[typing.Callable[[global___CreateTaskResp], None]],
    ) -> concurrent.futures.Future[global___CreateTaskResp]: ...
    def StartRound(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___StartRoundReq,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    def JoinRound(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___JoinRoundReq,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    def GetTaskRound(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___TaskRoundReq,
        done: typing.Optional[typing.Callable[[global___TaskRoundResp], None]],
    ) -> concurrent.futures.Future[global___TaskRoundResp]: ...
    def SelectCandidates(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___CandidatesReq,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    def UploadSeedCommitment(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___ShareCommitment,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    def UploadSecretKeyCommitment(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___ShareCommitment,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    def GetClientPublickKeys(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___PublicKeyReq,
        done: typing.Optional[typing.Callable[[global___PublicKeyResp], None]],
    ) -> concurrent.futures.Future[global___PublicKeyResp]: ...
    def StartCalculation(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___CalculationReq,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    def UploadResultCommitment(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___ResultCommitment,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    def GetResultCommitment(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___ResultCommitmentReq,
        done: typing.Optional[typing.Callable[[global___ResultCommitmentResp], None]],
    ) -> concurrent.futures.Future[global___ResultCommitmentResp]: ...
    def StartAggregation(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___AggregationReq,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    def UploadSeed(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___Share,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    def UploadSecretKey(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___Share,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    def GetSecretShareData(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___SecretShareReq,
        done: typing.Optional[typing.Callable[[global___SecretShareResp], None]],
    ) -> concurrent.futures.Future[global___SecretShareResp]: ...
    def EndRound(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___EndRoundReq,
        done: typing.Optional[typing.Callable[[global___Empty], None]],
    ) -> concurrent.futures.Future[global___Empty]: ...
    def Subscribe(self,
        rpc_controller: google.protobuf.service.RpcController,
        request: global___EventReq,
        done: typing.Optional[typing.Callable[[global___Event], None]],
    ) -> concurrent.futures.Future[global___Event]: ...