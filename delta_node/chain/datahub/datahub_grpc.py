# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: datahub.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

from ..transaction import transaction_pb2
from . import datahub_pb2


class DataHubBase(abc.ABC):

    @abc.abstractmethod
    async def Register(self, stream: 'grpclib.server.Stream[datahub_pb2.RegisterReq, transaction_pb2.Transaction]') -> None:
        pass

    @abc.abstractmethod
    async def GetDataCommitment(self, stream: 'grpclib.server.Stream[datahub_pb2.DataCommitmentReq, datahub_pb2.DataCommitmentResp]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/datahub.DataHub/Register': grpclib.const.Handler(
                self.Register,
                grpclib.const.Cardinality.UNARY_UNARY,
                datahub_pb2.RegisterReq,
                transaction_pb2.Transaction,
            ),
            '/datahub.DataHub/GetDataCommitment': grpclib.const.Handler(
                self.GetDataCommitment,
                grpclib.const.Cardinality.UNARY_UNARY,
                datahub_pb2.DataCommitmentReq,
                datahub_pb2.DataCommitmentResp,
            ),
        }


class DataHubStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Register = grpclib.client.UnaryUnaryMethod(
            channel,
            '/datahub.DataHub/Register',
            datahub_pb2.RegisterReq,
            transaction_pb2.Transaction,
        )
        self.GetDataCommitment = grpclib.client.UnaryUnaryMethod(
            channel,
            '/datahub.DataHub/GetDataCommitment',
            datahub_pb2.DataCommitmentReq,
            datahub_pb2.DataCommitmentResp,
        )
